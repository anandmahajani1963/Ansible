---
- name: testing file creation
  hosts: oracle12gg2
  become: no
  gather_facts: yes

  become_user: oracle
  vars:
    oracle_owner: oracle
    oracle_group: oinstall
    oracle_base: /u01/app/oracle
    oracle_mount: "{{ oracle_base }}/product"
    oracle_home: "{{ oracle_base }}/product/12c/dbhome_1"
    path: "{{ oracle_home }}/bin"
    tns_admin: "{{ oracle_home }}/network/admin"
    impdp_type: SCHEMAS=BI,OE,SH
    impdp_option: table_exists_action=replace
    user_id: "'/ as sysdba'"
    source_db: ESBDPT
    target_db: ESBDPT
    source_cluster: oracle12gg1
    target_cluster: oracle12gg2
    
    parallel: 1

  tasks:

    # How do we handle 1st of the month (and the latest export is completed on last day of the previous month
    - name: get YYYYMON
      action: shell date '+%b%Y'| tr "[a-z]" "[A-Z]"
      register: YM

    - name: create data pump export directory (Linux)
      file:
        state: directory
        path: "/{{ target_cluster }}/{{ target_db }}/expdp/DAILY{{ YM.stdout }}"
        owner: "{{ oracle_owner }}"
        group: "{{ oracle_group }}"
        mode: 0644
        recurse: yes
      register: target_dir

    - name: list name of export directory
      debug:
        msg: "Directory is /{{ target_cluster }}/{{ target_db }}/expdp/DAILY{{ YM.stdout }}"

    - name: find the latest data pump export file count
      # how would you handle parallel export 
      action: shell ls -lrt /{{ source_cluster }}/{{ source_db }}/expdp/DAILY{{ YM.stdout }}/expdp_{{ source_db }}_*.dmp|wc -l
      register: expdp_file_count
    - name: Export file count
      debug:
        msg: "Data Pump export File count is {{ expdp_file_count.stdout }}"
      #{{ parallel }}=expdp_file_count.stdout
     
    - name: find the latest data pump export file(s)
      action: shell cd /{{ source_cluster }}/{{ source_db }}/expdp/DAILY{{ YM.stdout }}; ls -t1 expdp_{{ source_db }}_*.dmp|head -n 1
      register: expdp_file_name
      vars:
        dumpfile: expdp_file_name.stdout
    - name: Dump file name
      debug:
        msg: "Dumpfile used for import is {{ expdp_file_name.stdout  }}"
     
    - name: create par file
      copy:
        dest: "/{{ target_cluster }}/{{ target_db }}/expdp/DAILY{{ YM.stdout }}/impdp_{{ target_db }}.par"
        content: |
          userid={{ user_id }}
          directory={{ source_db }}_DAILY{{ YM.stdout }}
          dumpfile={{ expdp_file_name.stdout }}
          logfile=impdp_{{ target_db }}_{{ ansible_date_time.year }}{{ ansible_date_time.month }}{{ ansible_date_time.day }}_{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}{{ ansible_date_time.second }}.log
          {{ impdp_type }}
          {{ impdp_option }}
      register: parfile
    - name: print parfile name
      debug:
        msg: "parfile is /{{ target_cluster }}/{{ target_db }}/expdp/DAILY{{ YM.stdout }}/impdp_{{ target_db }}.par"
    - name: check if the database instance is up and running
      action: shell ps -ef|grep pmon|grep -v grep|cut -f3 -d"_"|grep {{ target_db }}
      register: ora_pmon

    - name: oracle directory object sql script
      copy: 
        dest: "/{{ target_cluster }}/{{ target_db }}/expdp/DAILY{{ YM.stdout }}/check_dir.sql"
        content: |
          set feedback on
          spool /{{ target_cluster }}/{{ target_db }}/expdp/DAILY{{ YM.stdout }}/check_dir.log
          connect / as sysdba
          create or replace directory {{ source_db }}_DAILY{{ YM.stdout }} as '/{{ target_cluster }}/{{ source_db }}/expdp/DAILY{{ YM.stdout }}';
          exit
      when: 
        - ora_pmon.stdout != ""

    - name: create oracle directory object DAILY{{ YM.stdout }}
      remote_user: oracle
      action: >
        shell export ORACLE_SID={{ target_db }}; 
        export ORACLE_HOME={{ oracle_home }}; 
        export TNS_ADMIN={{ tns_admin }}; 
        {{ path }}/sqlplus -S /nolog @/{{ target_cluster }}/{{ target_db }}/expdp/DAILY{{ YM.stdout }}/check_dir.sql

    - name: run data pump import of the target database
      remote_user: oracle
      action: >
        shell export ORACLE_SID={{ target_db }}; 
        export ORACLE_HOME={{ oracle_home }}; 
        export TNS_ADMIN={{ tns_admin }}; 
        {{ path }}/impdp parfile=/{{ ansible_host }}/{{ target_db }}/expdp/DAILY{{ YM.stdout }}/impdp_{{ target_db }}.par
      when: 
        - ora_pmon.stdout != ""

#    - name: Fail if Oracle database is not up and running
#      fail:
#        msg: "The database instance {{ oracle_sid }} is not running"
#      when:
#        ora_pmon.stdout=""
#        
